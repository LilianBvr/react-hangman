{"version":3,"sources":["Mask.js","Keyboard.js","App.js","serviceWorker.js","index.js"],"names":["Mask","mask","className","map","letter","index","key","Keyboard","letters","testedLetters","onClick","includes","LETTERS","Array","from","App","handleLetterClick","state","word","newMask","revealLetter","push","setState","won","every","char","handleRestartClick","getInitState","this","Restart","i","WORDS","Math","floor","random","length","getRandomWord","getInitialMask","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mSAyBeA,G,YApBF,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OAEZ,yBAAKC,UAAU,QAEbD,EAAKE,KAAI,SAAEC,EAAQC,GAAV,OACR,0BACCH,UAAS,iBAAsB,MAATE,EAAe,SAAW,IAChDE,IAAKD,GAEJD,SCaSG,G,MAtBE,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,cAAeC,EAA3B,EAA2BA,QAA3B,OAEhB,yBAAKR,UAAU,YAEbM,EAAQL,KAAI,SAAEC,EAAQC,GAAV,OACX,4BACCH,UAAS,iBAAYO,EAAcE,SAASP,GAAU,SAAW,IACjEE,IAAKD,EACLK,QAAS,kBAAMA,EAAQN,KAEtBA,SCRAQ,EAAUC,MAAMC,KAAK,8BAErBC,E,kDAGL,aAAc,IAAD,8BACZ,gBA6BDC,kBAAoB,SAAAZ,GAAW,IAAD,EACS,EAAKa,MAA7BR,GADe,EACrBR,KADqB,EACfQ,eAAeS,EADA,EACAA,KACvBC,EAAU,EAAKC,aAAahB,GAE9BK,EAAcE,SAASP,KAE1BK,EAAcY,KAAKjB,GAEnB,EAAKkB,SAAS,CACbb,cAAeA,EACfR,KAAMkB,EACNI,IAAKL,EAAKM,OAAM,SAACC,EAAMpB,GAAP,OAAiBoB,IAASN,EAAQd,UAzCxC,EAgDbqB,mBAAqB,WACpB,EAAKJ,SAAU,EAAKK,iBA7CpB,EAAKV,MAAQ,EAAKU,eAJN,E,qDASJ,IAAD,EAC8BC,KAAKX,MAAlChB,EADD,EACCA,KAAMQ,EADP,EACOA,cAAec,EADtB,EACsBA,IAC3B,OACE,yBAAKrB,UAAU,WACd,kBAAC,EAAD,CAAMD,KAAMA,IAGXsB,EAAM,kBAACM,EAAD,CAASnB,QAASkB,KAAKF,qBAC5B,kBAAC,EAAD,CACClB,QAASI,EACTH,cAAeA,EACfC,QAASkB,KAAKZ,uB,mCAiCTZ,GAAS,IAAD,EACEwB,KAAKX,MAApBhB,EADa,EACbA,KAAMiB,EADO,EACPA,KAEd,OAAOjB,EAAKE,KAAI,SAACsB,EAAMK,GAAP,OAAa1B,IAASc,EAAKY,GAAKZ,EAAKY,GAAKL,O,sCAK1D,OAAOZ,MAAMC,KAAKiB,EAAOC,KAAKC,MAAMD,KAAKE,SAAWH,EAAMI,Y,qCAI1D,IAAMjB,EAAOU,KAAKQ,gBAElB,MAAO,CACNlB,KAAMA,EACNjB,KAAMoC,EAAenB,GACrBT,cAAe,GACfc,KAAK,O,GA1EUe,aAiFlB,SAASD,EAAenB,GACvB,OAAOA,EAAKf,KAAI,SAACC,EAAQC,GAAT,MAAiB,CAAC,EAAEa,EAAKiB,OAAO,GAAGxB,SAASN,GAASD,EAAS,OAI/E,SAASyB,EAAT,GAA8B,IAAXnB,EAAU,EAAVA,QAElB,OAAO,4BAAQR,UAAU,UAAUQ,QAASA,GAArC,eAKR,IAAMqB,EAAQ,CACb,SACA,QACA,SACA,QACA,QACA,SACA,YACA,UACA,SACA,SAIchB,ICxGKwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.18a6647c.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport './Mask.css'\n\nconst Mask = ({ mask }) => (\n\t\n\t<div className='mask' >\n\t\t{\n\t\t\tmask.map(( letter, index ) => (\n\t\t\t\t<span \n\t\t\t\t\tclassName={`letter ${ letter==='_' ? 'hidden' : '' }`} \n\t\t\t\t\tkey={index}\n\t\t\t\t>\n\t\t\t\t\t{letter}\n\t\t\t\t</span>\n\t\t\t))\n\t\t}\t\n\t</div>\n)\n\nMask.propTypes = {\n\tmask: PropTypes.array\n}\n\nexport default Mask","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport './Keyboard.css'\n\nconst Keyboard = ({ letters, testedLetters, onClick}) => (\n\n\t<div className='keyboard'>\n\t\t{\n\t\t\tletters.map(( letter, index ) => (\n\t\t\t\t<button \n\t\t\t\t\tclassName={`letter ${testedLetters.includes(letter) ? 'tested' : ''}`}\n\t\t\t\t\tkey={index}\n\t\t\t\t\tonClick={() => onClick(letter)}\n\t\t\t\t>\n\t\t\t\t\t{letter}\n\t\t\t\t</button>\n\t\t\t))\n\t\t}\n\t</div>\n)\n\nKeyboard.propTypes = {\n\tletters: PropTypes.array,\n\ttestedLetters: PropTypes.array\n}\n\nexport default Keyboard","import React, {Component} from 'react';\n\nimport './App.css';\n\nimport Mask from './Mask'\nimport Keyboard from './Keyboard'\n\nconst LETTERS = Array.from('ABCDEFGHIJKLMNOPQRSTUVWXYZ')\n\nclass App extends Component {\n\n\n\tconstructor(){\n\t\tsuper()\n\n\t\t/*\tEtat local\t*/\n\t\tthis.state = this.getInitState()\n\t}\n\t\n\n\t/*\tMéthode de rendu du composant\t*/\n\trender(){\n\t\tconst { mask, testedLetters, won } = this.state\n\t  \treturn (\n\t    \t<div className=\"hangman\">\n\t    \t\t<Mask mask={mask} />\n\n\t    \t\t{\n\t    \t\t\twon ? <Restart onClick={this.handleRestartClick} /> :\n\t    \t\t\t\t<Keyboard \n\t    \t\t\t\t\tletters={LETTERS} \n\t    \t\t\t\t\ttestedLetters={testedLetters}\n\t    \t\t\t\t\tonClick={this.handleLetterClick}\n\t    \t\t\t\t/>\n\t    \t\t}\n\n\t    \t</div>\n\t  \t)\n\t}\n\n\t/*\tGestionnaire de clic sur une lettre \t*/\n\t/* @autobind */\n\thandleLetterClick = letter => {\n\t\tconst { mask, testedLetters, word } = this.state\n\t\tconst newMask = this.revealLetter(letter)\n\n\t\tif(!testedLetters.includes(letter))\n\t\t{\n\t\t\ttestedLetters.push(letter)\n\n\t\t\tthis.setState({\n\t\t\t\ttestedLetters: testedLetters,\n\t\t\t\tmask: newMask,\n\t\t\t\twon: word.every((char, index) => char === newMask[index] )\n\t\t\t})\n\t\t}\n\t}\n\n\t/*\tGestionnaire de l'évènement Recommencer*/\n\t/* @autobind */\n\thandleRestartClick = () => { \n\t\tthis.setState( this.getInitState() ) \n\t}\n\n\t/*\tRévèle la lettre en paramètres et retourne le nouveau masque\t*/\n\trevealLetter( letter ){\n\t\tconst { mask, word } = this.state\n\n\t\treturn mask.map((char, i) => letter===word[i] ? word[i] : char)\n\t}\n\n\t/*\tRenvoie un mot aléatoire de la liste locale\t*/\n\tgetRandomWord(){\n\t\treturn Array.from(WORDS[ Math.floor(Math.random() * WORDS.length )]);\n\t}\n\n\tgetInitState(){\n\t\tconst word = this.getRandomWord()\n\n\t\treturn { \n\t\t\tword: word,\n\t\t\tmask: getInitialMask(word),\n\t\t\ttestedLetters: [],\n\t\t\twon: false\n\t\t}\n\t}\n\n}\n\n/*\tMéthode retournant le mot masqué de départ\t*/\nfunction getInitialMask(word){\n\treturn word.map((letter, index)=>[0,word.length-1].includes(index) ? letter : '_')\n}\n\n/*\tBouton recommencer\t(composant) */\nfunction Restart({ onClick }){ \n\t \n\treturn <button className=\"restart\" onClick={onClick}>\n\t\tRecommencer\n\t</button>\n}\n\nconst WORDS = [\n\t'MANGER',\n\t'BOIRE',\n\t'DORMIR',\n\t'POMME',\n\t'POIRE',\n\t'FRAISE',\n\t'FRAMBOISE',\n\t'SUPREME',\n\t'PALACE',\n\t'GUCCI'\n]\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}