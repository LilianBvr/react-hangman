{"version":3,"sources":["Mask.js","Keyboard.js","App.js","index.js"],"names":["Mask","mask","className","map","letter","index","key","Keyboard","letters","testedLetters","onClick","includes","LETTERS","Array","from","App","handleLetterClick","state","word","newMask","revealLetter","push","setState","won","every","char","handleRestartClick","getInitState","this","i","WORDS","Math","floor","random","length","getRandomWord","getInitialMask","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mSAyBeA,G,YApBF,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OAEZ,yBAAKC,UAAU,QAEbD,EAAKE,KAAI,SAAEC,EAAQC,GAAV,OACR,0BACCH,UAAS,iBAAsB,MAATE,EAAe,SAAW,IAChDE,IAAKD,GAEJD,SCaSG,G,MAtBE,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,cAAeC,EAA3B,EAA2BA,QAA3B,OAEhB,yBAAKR,UAAU,YAEbM,EAAQL,KAAI,SAAEC,EAAQC,GAAV,OACX,4BACCH,UAAS,iBAAYO,EAAcE,SAASP,GAAU,SAAW,IACjEE,IAAKD,EACLK,QAAS,kBAAMA,EAAQN,KAEtBA,SCROQ,EAAUC,MAAMC,KAAK,8BAE5BC,E,kDAEL,aAAc,IAAD,8BACZ,gBA8BDC,kBAAoB,SAAAZ,GAAW,IAAD,EACS,EAAKa,MAA7BR,GADe,EACrBR,KADqB,EACfQ,eAAeS,EADA,EACAA,KACvBC,EAAU,EAAKC,aAAahB,GAE9BK,EAAcE,SAASP,KAE1BK,EAAcY,KAAKjB,GAEnB,EAAKkB,SAAS,CACbb,cAAeA,EACfR,KAAMkB,EACNI,IAAKL,EAAKM,OAAM,SAACC,EAAMpB,GAAP,OAAiBoB,IAASN,EAAQd,UA1CxC,EAiDbqB,mBAAqB,WACpB,EAAKJ,SAAU,EAAKK,iBA9CpB,EAAKV,MAAQ,EAAKU,eAJN,E,qDAQJ,IAAD,EAC8BC,KAAKX,MAAlChB,EADD,EACCA,KAAMQ,EADP,EACOA,cAAec,EADtB,EACsBA,IAC3B,OACE,yBAAKrB,UAAU,WACd,kBAAC,EAAD,CAAMD,KAAMA,IAGXsB,EAAM,4BAAQrB,UAAU,UAAUQ,QAASkB,KAAKF,oBAA1C,eAGL,kBAAC,EAAD,CACClB,QAASI,EACTH,cAAeA,EACfC,QAASkB,KAAKZ,uB,mCAiCTZ,GAAS,IAAD,EACEwB,KAAKX,MAApBhB,EADa,EACbA,KAAMiB,EADO,EACPA,KAEd,OAAOjB,EAAKE,KAAI,SAACsB,EAAMI,GAAP,OAAazB,IAASc,EAAKW,GAAKX,EAAKW,GAAKJ,O,sCAK1D,OAAOZ,MAAMC,KAAKgB,EAAOC,KAAKC,MAAMD,KAAKE,SAAWH,EAAMI,Y,qCAK1D,IAAMhB,EAAOU,KAAKO,gBAElB,MAAO,CACNjB,KAAMA,EACNjB,KAAM2B,KAAKQ,eAAelB,GAC1BT,cAAe,GACfc,KAAK,K,qCAKQL,GACd,OAAOA,EAAKf,KAAI,SAACC,EAAQC,GAAT,MAAiB,CAAC,EAAEa,EAAKgB,OAAO,GAAGvB,SAASN,GAASD,EAAS,W,GAjF9DiC,aAsFZP,EAAQ,CACb,SACA,QACA,SACA,QACA,QACA,SACA,YACA,UACA,SACA,SAIcf,ICvGfuB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.1d94dd63.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport './Mask.css'\n\nconst Mask = ({ mask }) => (\n\t\n\t<div className='mask' >\n\t\t{\n\t\t\tmask.map(( letter, index ) => (\n\t\t\t\t<span \n\t\t\t\t\tclassName={`letter ${ letter==='_' ? 'hidden' : '' }`} \n\t\t\t\t\tkey={index}\n\t\t\t\t>\n\t\t\t\t\t{letter}\n\t\t\t\t</span>\n\t\t\t))\n\t\t}\t\n\t</div>\n)\n\nMask.propTypes = {\n\tmask: PropTypes.array\n}\n\nexport default Mask","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport './Keyboard.css'\n\nconst Keyboard = ({ letters, testedLetters, onClick}) => (\n\n\t<div className='keyboard'>\n\t\t{\n\t\t\tletters.map(( letter, index ) => (\n\t\t\t\t<button \n\t\t\t\t\tclassName={`letter ${testedLetters.includes(letter) ? 'tested' : ''}`}\n\t\t\t\t\tkey={index}\n\t\t\t\t\tonClick={() => onClick(letter)}\n\t\t\t\t>\n\t\t\t\t\t{letter}\n\t\t\t\t</button>\n\t\t\t))\n\t\t}\n\t</div>\n)\n\nKeyboard.propTypes = {\n\tletters: PropTypes.array,\n\ttestedLetters: PropTypes.array\n}\n\nexport default Keyboard","import React, {Component} from 'react';\n\nimport './App.css';\n\nimport Mask from './Mask'\nimport Keyboard from './Keyboard'\n\nexport const LETTERS = Array.from('ABCDEFGHIJKLMNOPQRSTUVWXYZ')\n\nclass App extends Component {\n\n\tconstructor(){\n\t\tsuper()\n\n\t\t/*\tEtat local\t*/\n\t\tthis.state = this.getInitState()\n\t}\n\t\n\t/*\tMéthode de rendu du composant\t*/\n\trender(){\n\t\tconst { mask, testedLetters, won } = this.state\n\t  \treturn (\n\t    \t<div className=\"hangman\">\n\t    \t\t<Mask mask={mask} />\n\n\t    \t\t{\n\t    \t\t\twon ? <button className=\"restart\" onClick={this.handleRestartClick}>\n\t\t\t\t\t\t\tRecommencer\n\t\t\t\t\t\t</button> :\n\t    \t\t\t\t<Keyboard \n\t    \t\t\t\t\tletters={LETTERS} \n\t    \t\t\t\t\ttestedLetters={testedLetters}\n\t    \t\t\t\t\tonClick={this.handleLetterClick}\n\t    \t\t\t\t/>\n\t    \t\t}\n\n\t    \t</div>\n\t  \t)\n\t}\n\n\t/*\tGestionnaire de clic sur une lettre \t*/\n\t/* @autobind */\n\thandleLetterClick = letter => {\n\t\tconst { mask, testedLetters, word } = this.state\n\t\tconst newMask = this.revealLetter(letter)\n\n\t\tif(!testedLetters.includes(letter))\n\t\t{\n\t\t\ttestedLetters.push(letter)\n\n\t\t\tthis.setState({\n\t\t\t\ttestedLetters: testedLetters,\n\t\t\t\tmask: newMask,\n\t\t\t\twon: word.every((char, index) => char === newMask[index] )\n\t\t\t})\n\t\t}\n\t}\n\n\t/*\tGestionnaire de l'évènement Recommencer*/\n\t/* @autobind */\n\thandleRestartClick = () => { \n\t\tthis.setState( this.getInitState() ) \n\t}\n\n\t/*\tRévèle la lettre en paramètres et retourne le nouveau masque\t*/\n\trevealLetter( letter ){\n\t\tconst { mask, word } = this.state\n\n\t\treturn mask.map((char, i) => letter===word[i] ? word[i] : char)\n\t}\n\n\t/*\tRenvoie un mot aléatoire de la liste locale\t*/\n\tgetRandomWord(){\n\t\treturn Array.from(WORDS[ Math.floor(Math.random() * WORDS.length )]);\n\t}\n\n\t/*\tRenvoie l'état initial\t*/\n\tgetInitState(){\n\t\tconst word = this.getRandomWord()\n\n\t\treturn { \n\t\t\tword: word,\n\t\t\tmask: this.getInitialMask(word),\n\t\t\ttestedLetters: [],\n\t\t\twon: false\n\t\t}\n\t}\n\n\t/*\tMéthode retournant le mot masqué de départ\t*/\n\tgetInitialMask(word){\n\t\treturn word.map((letter, index)=>[0,word.length-1].includes(index) ? letter : '_')\n\t}\n}\n\n\nconst WORDS = [\n\t'MANGER',\n\t'BOIRE',\n\t'DORMIR',\n\t'POMME',\n\t'POIRE',\n\t'FRAISE',\n\t'FRAMBOISE',\n\t'SUPREME',\n\t'PALACE',\n\t'GUCCI'\n]\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}